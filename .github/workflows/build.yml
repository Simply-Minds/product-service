# GitHub Actions Workflow: CI/CD for Spring Boot

name: CI/CD for Spring Boot

# Define when this workflow should be triggered
on:
  push:
    branches:
      - "master"            # Trigger on push to master branch
      - "develop"           # Trigger on push to develop branch
      - "feature-IOMS-**"   # Trigger on push to feature branches (e.g., feature-IOMS-1007)
  pull_request:
    branches:
      - "master"            # Trigger on pull requests to master branch
      - "develop"           # Trigger on pull requests to develop branch
      - "feature-IOMS-**"   # Trigger on pull requests to feature branches
  workflow_dispatch:         # Allow manual triggering of this workflow

# Set default permissions
permissions:
  contents: read             # Allow read access to the repository contents
  pull-requests: read        # Allow read access to pull request metadata (needed for SonarCloud PR decoration)

# Define jobs for this workflow
jobs:
  # Job 1: Checkout Code
  validate-commit-message:
    name: Validate Commit Message
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner for this job

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Validate commit message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          # Ensure commit message follows the format: <ticket-ID>: Meaningful message
          if ! echo "$COMMIT_MSG" | grep -qE "^[A-Za-z0-9\-]+-[0-9]+: .+"; then
            echo "Error: Invalid commit message format."
            exit 1
          fi
       

  # Job 3: Build and Test with Maven
  build-and-test:
    name: Build and Test with Maven
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner for this job
    needs: validate-commit-message  # Run this job after validate-commit-message job

    steps:
    
      # Step 1:  Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3
      # Step 2: Set up JDK for the project
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"  # Set the JDK version to 17

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      # Step 4: Build and test the application with Maven
      - name: Build and test
        run: mvn clean install
        env:
          MAVEN_OPTS: "-Xmx1024m -XX:MaxMetaspaceSize=256m"

  # Job 4: SonarCloud Analysis
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest     # Use the latest Ubuntu runner for this job
    needs: build-and-test      # Run this job after the build-and-test job succeeds
    if: ${{ vars.SONAR_ENABLED == 'true' }}  # Skip this job if SONAR_ENABLED is not true

    steps:
      # Step 1: Checkout the repository code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0       # Disable shallow clones for accurate analysis

      # Step 2: Set up JDK for Sonar analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 3: Cache SonarCloud analysis packages
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 5: Run SonarCloud analysis
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Use the SonarCloud token from secrets
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ vars.PROJECT_KEY }}

  # Job 5: Build Docker Image
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner for this job
    needs: build-and-test    # Run this job after build-and-test job

    steps:
      # Step 1:  Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Step 1: Log in to Docker Hub
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # Step 2: Build a Docker image for the application
      - name: Build Docker image
        run: docker build -t abhishekra19/product-service .

  # Job 6: Push Docker Image to Docker Hub
  push-docker-image:
    name: Push Docker Image to Docker Hub
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner for this job
    needs: build-docker-image # Run this job after build-docker-image job

    steps:
      - name: Publish Docker image to Docker Hub
        run: docker push abhishekra19/product-service:latest

  # Job 7: Deploy to EC2
  deploy-to-ec2:
    name: Deploy to EC2
    needs: push-docker-image      # Run this job only after the push-docker-image job succeeds
    runs-on: [aws-ec2]         # Use a self-hosted runner on an EC2 instance

    steps:
      # Step 1: Pull the latest Docker image from Docker Hub
      - name: Pull Docker image
        run: docker pull abhishekra19/product-service:latest

      # Step 2: Stop and remove the old container
      - name: Remove old container
        run: docker rm -f product-service-container

      # Step 3: Run the Docker container with the latest image
      - name: Run Docker container
        run: docker run -d -p 8080:8080 --name product-service-container abhishekra19/product-service

# GitHub Actions Workflow: CI/CD for Spring Boot
name: CI/CD for Spring Boot

# Define when this workflow should be triggered
on:
  push:
    branches:
      - "master"
      - "develop"
      - "feature-IOMS-**"
  pull_request:
    branches:
      - "master"
      - "develop"
      - "feature-IOMS-**"
  workflow_dispatch:

# Set default permissions
permissions:
  contents: read
  pull-requests: read

# Define jobs for this workflow
jobs:
  # Job 1: Build and Test with Maven
  build-and-test:
    name: Build and Test with Maven
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate commit message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          if ! echo "$COMMIT_MSG" | grep -qE "^[A-Za-z0-9\-]+-[0-9]+: .+"; then
            echo "Error: Invalid commit message format."
            exit 1
          fi

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Build and test
        run: mvn clean install
        env:
          MAVEN_OPTS: "-Xmx1024m -XX:MaxMetaspaceSize=256m"

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t abhishekra19/product-service .

      - name: Publish Docker image to Docker Hub
        run: docker push abhishekra19/product-service:latest

  # Job 2: SonarCloud Analysis
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ vars.SONAR_ENABLED == 'true' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ vars.PROJECT_KEY }}

  # Job 3: Deploy to EC2
  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-test
    runs-on: [aws-ec2]
    if: ${{ vars.DEPLOY_ENABLED == 'true' }}

    steps:
      - name: Pull Docker image
        run: docker pull abhishekra19/product-service:latest

      - name: Remove old container
        run: docker rm -f product-service-container || true

      - name: Run Docker container
        run: docker run -d -p 8080:8080 --name product-service-container abhishekra19/product-service
